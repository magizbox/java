{
    "docs": [
        {
            "location": "/", 
            "text": "Java\n\n\nJava is a general-purpose computer programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \"write once, run anywhere\" (WORA), meaning that compiled Java code can run on all platforms that support Java without the need for recompilation. Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM) regardless of computer architecture. As of 2016, Java is one of the most popular programming languages in use, particularly for client-server web applications, with a reported 9 million developers. Java was originally developed by \nJames Gosling\n at Sun Microsystems (which has since been acquired by Oracle Corporation) and released in 1995 as a core component of Sun Microsystems' Java platform. The language derives much of its syntax from C and C++, but it has fewer low-level facilities than either of them.\n\n\nThe original and reference implementation Java compilers, virtual machines, and class libraries were originally released by Sun under proprietary licences. As of May 2007, in compliance with the specifications of the Java Community Process, Sun relicensed most of its Java technologies under the GNU General Public License. Others have also developed alternative implementations of these Sun technologies, such as the GNU Compiler for Java (bytecode compiler), GNU Classpath (standard libraries), and IcedTea-Web (browser plugin for applets).\n\n\nBooks\n\n\n\n\n\n\n\n\nCourses", 
            "title": "<span class='fa fa-home'></span> Home"
        }, 
        {
            "location": "/#java", 
            "text": "Java is a general-purpose computer programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers \"write once, run anywhere\" (WORA), meaning that compiled Java code can run on all platforms that support Java without the need for recompilation. Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM) regardless of computer architecture. As of 2016, Java is one of the most popular programming languages in use, particularly for client-server web applications, with a reported 9 million developers. Java was originally developed by  James Gosling  at Sun Microsystems (which has since been acquired by Oracle Corporation) and released in 1995 as a core component of Sun Microsystems' Java platform. The language derives much of its syntax from C and C++, but it has fewer low-level facilities than either of them.  The original and reference implementation Java compilers, virtual machines, and class libraries were originally released by Sun under proprietary licences. As of May 2007, in compliance with the specifications of the Java Community Process, Sun relicensed most of its Java technologies under the GNU General Public License. Others have also developed alternative implementations of these Sun technologies, such as the GNU Compiler for Java (bytecode compiler), GNU Classpath (standard libraries), and IcedTea-Web (browser plugin for applets).", 
            "title": "Java"
        }, 
        {
            "location": "/#books", 
            "text": "", 
            "title": "Books"
        }, 
        {
            "location": "/#courses", 
            "text": "", 
            "title": "Courses"
        }, 
        {
            "location": "/getting_started/", 
            "text": "Installation\n\n\nUbuntu\n\n\nStep 1. Download sdk\n\n\nhttp://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html\n\n\n\n\nStep 2. Create folder jvm\n\n\nsudo mkdir /usr/lib/jvm/\n\n\n\n\nStep 3. cd to folder downloads jdk and run command\n\n\nsudo mv jdk1.7.0_x/ /usr/lib/jvm/jdk1.7.0_x\n\n\n\n\nRun install java\n\n\nsudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.7.0_x/jre/bin/java 0\n\n\n\n\nAdd path jdk : /usr/lib/jvm/jdk1.7.0_x\n\n\nsu -\nnano /etc/environment", 
            "title": "<span class='fa fa-cloud-download'></span> Getting Started"
        }, 
        {
            "location": "/getting_started/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/getting_started/#ubuntu", 
            "text": "Step 1. Download sdk  http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html  Step 2. Create folder jvm  sudo mkdir /usr/lib/jvm/  Step 3. cd to folder downloads jdk and run command  sudo mv jdk1.7.0_x/ /usr/lib/jvm/jdk1.7.0_x", 
            "title": "Ubuntu"
        }, 
        {
            "location": "/getting_started/#run-install-java", 
            "text": "sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.7.0_x/jre/bin/java 0  Add path jdk : /usr/lib/jvm/jdk1.7.0_x  su -\nnano /etc/environment", 
            "title": "Run install java"
        }, 
        {
            "location": "/introduction/", 
            "text": "Java\n\n\nI can code Java, but... \n1\n\n\n\n\nBest Programming languages \n2\n\n\n\n\nInstallation \n3\n\n\n\n# cent os 6.5\nyum install java-1.7.0-openjdk-devel\n\n\n\n\nConcepts\n\n\n\nAnnotations\n\n\nTools\n\n\n\n\n\n\n\n\n\n\nBuild Tool\n\n\n\nTest\n\n\n\n\n\n\nGradle\n\n\nJUnit\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPatterns in Real Life\n\n\n\n\n\n\n\nFunny Story | Best Programming languages\n\n\n\n\n\n\n\nHow To Install Java on CentOS and Fedora\n\n\n\n\n\n\n\n\n\n\n2. Hello World \n1\n\n\npublic class HelloWorld {\n\n    public static void main(String[] args) {\n        // Prints \nHello, World\n to the terminal window.\n        System.out.println(\nHello, World\n);\n    }\n\n}\n\n\n\n\nJava: Parallel\n\n\nThread\n\n\nTimer\n\n\nJava: Configuration\n\n\n-VM options : VM options are loaded from the IDE_HOME\\bin\\\n[bits][.exe].vmoptions file.\n[1]\n\n-ea : enable assertions\n\n\n-ea -D[FILE_NAME]=\n$PATH_DATA\n\n\n\n\n\nJava: Web with Spring\n\n\n\n\n\n  \nSpring helps development teams everywhere build simple, portable, fast and flexible JVM-based systems and applications.\n\n\n\n\n\nComponents\n\n\n\nSpring Boot\n: Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can \"just run\". We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.\n\n\n\nSpring: Database\n\n\nDatabase Migration\n\n\nFlyway\n\n\nJava: Errors\n\n\nTwo Many Open Files \n1\n \n2\n\n\nEdit  \n/etc/sysctl.conf\n\n\nfs.file-max = 100000\n\n\n\n\nSpring, http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency\n\n\n\n\n\n\n\n\n\n\nLinux Increase The Maximum Number Of Open Files / File Descriptors (FD)\n\n\n\n\n\n\n[java 1=\"Too\" 2=\"many\" 3=\"open\" 4=\"files\" 5=\"Spring\" 6=\"Hibernate\" 7=\"Tomcat\" language=\".net.SocketException:\"]\n/java", 
            "title": "Introduction"
        }, 
        {
            "location": "/introduction/#java", 
            "text": "I can code Java, but...  1   Best Programming languages  2", 
            "title": "Java"
        }, 
        {
            "location": "/introduction/#2-hello-world-1", 
            "text": "public class HelloWorld {\n\n    public static void main(String[] args) {\n        // Prints  Hello, World  to the terminal window.\n        System.out.println( Hello, World );\n    }\n\n}", 
            "title": "2. Hello World 1"
        }, 
        {
            "location": "/introduction/#java-parallel", 
            "text": "Thread", 
            "title": "Java: Parallel"
        }, 
        {
            "location": "/introduction/#timer", 
            "text": "", 
            "title": "Timer"
        }, 
        {
            "location": "/introduction/#java-configuration", 
            "text": "-VM options : VM options are loaded from the IDE_HOME\\bin\\ [bits][.exe].vmoptions file. [1] \n-ea : enable assertions  -ea -D[FILE_NAME]= $PATH_DATA", 
            "title": "Java: Configuration"
        }, 
        {
            "location": "/introduction/#java-web-with-spring", 
            "text": "Spring helps development teams everywhere build simple, portable, fast and flexible JVM-based systems and applications.", 
            "title": "Java: Web with Spring"
        }, 
        {
            "location": "/introduction/#spring-database", 
            "text": "", 
            "title": "Spring: Database"
        }, 
        {
            "location": "/introduction/#database-migration", 
            "text": "Flyway", 
            "title": "Database Migration"
        }, 
        {
            "location": "/introduction/#java-errors", 
            "text": "", 
            "title": "Java: Errors"
        }, 
        {
            "location": "/introduction/#two-many-open-files-1-2", 
            "text": "Edit   /etc/sysctl.conf  fs.file-max = 100000  Spring, http://www.tomcatexpert.com/blog/2010/04/01/configuring-jdbc-pool-high-concurrency      Linux Increase The Maximum Number Of Open Files / File Descriptors (FD)    [java 1=\"Too\" 2=\"many\" 3=\"open\" 4=\"files\" 5=\"Spring\" 6=\"Hibernate\" 7=\"Tomcat\" language=\".net.SocketException:\"] /java", 
            "title": "Two Many Open Files 1 2"
        }, 
        {
            "location": "/basic_syntax/", 
            "text": "Variable \n Types\n\n\nAlthough Java is object oriented, not all types are objects. It is built on top of basic variable types called primitives.\n\n\nHere is a list of all primitives in Java:\n\n\n\n\nbyte\n (number, 1 byte)\n\n\nshort\n (number, 2 bytes)\n\n\nint\n (number, 4 bytes)\n\n\nlong\n (number, 8 bytes)\n\n\nfloat\n (float number, 4 bytes)\n\n\ndouble\n (float number, 8 bytes)\n\n\nchar\n (a character, 2 bytes)\n\n\nboolean\n (true or false, 1 byte)\nJava is a strong typed language, which means variables need to be defined before we use them.\n\n\n\n\nNumbers\n\n\nTo declare and assign a number use the following syntax:\n\n\nint myNumber;\nmyNumber = 5;\n\n\n\n\nOr you can combine them:\n\n\nint myNumber = 5;\n\n\n\n\nTo define a double floating point number, use the following syntax:\n\n\ndouble d = 4.5;\nd = 3.0;\n\n\n\n\nIf you want to use float, you will have to cast:\n\n\nfloat f = (float) 4.5;\n\n\n\n\nOr, You can use this:\n\n\nfloat f = 4.5f (f is a shorter way of casting float)\n\n\n\n\nCharacters and Strings\n\n\nIn Java, a character is it's own type and it's not simply a number, so it's not common to put an ascii value in it, there is a special syntax for chars:\n\n\nchar c = 'g';\n\n\n\n\nString is not a primitive. It's a real type, but Java has special treatment for String.\n\n\nHere are some ways to use a string:\n\n\n// Create a string with a constructor\nString s1 = new String(\nWho let the dogs out?\n);\n// Just using \n creates a string, so no need to write it the previous way.\nString s2 = \nWho who who who!\n;\n// Java defined the operator + on strings to concatenate:\nString s3 = s1 + s2;\n\n\n\n\nThere is no operator overloading in Java! The operator + is only defined for strings, you will never see it with other objects, only primitives.\n\n\nYou can also concat string to primitives:\n\n\nint num = 5;\nString s = \nI have \n + num + \n cookies\n; //Be sure not to use \n with primitives.\n\n\n\n\nboolean\n\n\nEvery comparison operator in java will return the type \nboolean\n that not like other languages can only accept two special values: \ntrue\n or \nfalse\n.\n\n\nboolean b = false;\nb = true;\n\nboolean toBe = false;\nb = toBe || !toBe;\nif (b) {\n    System.out.println(toBe);\n}\n\nint children = 0;\nb = children; // Will not work\nif (children) { // Will not work\n    // Will not work\n}\n\n\n\n\nOperators\n\n\nJava provides a rich set of operators to manipulate variables. We can divide all the Java operators into the following groups:\n\n\n\n\nArithmetic Operators\n\n\nRelational Operators\n\n\nBitwise Operators\n\n\nLogical Operators\n\n\nAssignment Operators\n\n\nMisc Operators\n\n\n\n\nThe Arithmetic Operators\n\n\nArithmetic operators are used in mathematical expressions in the same way that they are used in algebra.\n\n\nThe following table lists the arithmetic operators:\n\n\n\n  \n\n  \n\n    \nOperator\n\n    \nDescription\n\n    \nExample\n\n  \n\n  \n\n    \n+ (Addition)\n\n    \nAdds values on either side of the operator\n\n    \n10 + 20 -\n 30\n\n  \n\n  \n\n    \n- (Subtraction)\n\n    \nSubtracts right hand operand from left hand operand\n\n    \n10 - 20\n-\n -10\n\n  \n\n  \n\n    \n* ( Multiplication )\n\n    \nMultiplies values on either side of the operator\n\n    \n10 *\n20\n-\n 200\n\n  \n\n  \n\n    \n/ (Division)\n\n    \nDivides left hand operand by right hand operand\n\n    \n20 / 10 -\n 2\n\n  \n\n  \n\n    \n% (Modulus)\n\n    \nDivides left hand operand by right hand operand and returns remainder\n\n    \n7\n% 3 -\n1\n\n  \n\n  \n\n    \n++ (Increment)\n\n    \nIncreases the value of operand by 1\n\n    \n\n      \na = 20\n\n\n      \na++ -\n 21\n\n    \n\n  \n\n  \n\n    \n-- ( Decrement )\n\n    \nDecreases the value of operand by 1\n\n    \n\n      \na = 20\n\n\n      \na-- -\n 19\n\n    \n\n  \n\n  \n\n\n\n\n\nThe Relational Operators\n\n\nThere are following relational operators supported by Java language\n\n\n== (equal to)\nChecks if the values of two operands are equal or not, if yes then condition becomes true.\n\n\nExample: (A == B) is not true.\n2   != (not equal to)\nChecks if the values of two operands are equal or not, if values are not equal then condition becomes true.\n\n\nExample: (A != B) is true.\n\n\n3   \n (greater than)\nChecks if the value of left operand is greater than the value of right operand, if yes then condition becomes true.\n\n\nExample: (A \n B) is not true.\n4   \n (less than)\nChecks if the value of left operand is less than the value of right operand, if yes then condition becomes true.\n\n\nExample: (A \n B) is true.\n5   \n= (greater than or equal to)\nChecks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.\n\n\nExample (A \n= B) is not true.\n6   \n= (less than or equal to)\nChecks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true.\n\n\nexample(A \n= B) is true.\n\n\nThe Bitwise Operators\n\n\nJava defines several bitwise operators, which can be applied to the integer types, long, int, short, char, and byte.\n\n\nBitwise operator works on bits and performs bit-by-bit operation. Assume if a = 60; and b = 13; now in binary format they will be as follows:\n\n\na = 0011 1100\n\n\nb = 0000 1101\n\n\n\n\na\nb = 0000 1100\n\n\na|b = 0011 1101\n\n\na^b = 0011 0001\n\n\n~a  = 1100 0011\n\n\nThe following table lists the bitwise operators:\n\n\nAssume integer variable A holds 60 and variable B holds 13 then:\n\n\n (bitwise and)\nBinary AND Operator copies a bit to the result if it exists in both operands.\n\n\nExample: (A \n B) will give 12 which is 0000 1100\n2   | (bitwise or)\nBinary OR Operator copies a bit if it exists in either operand.\n\n\nExample: (A | B) will give 61 which is 0011 1101\n3   ^ (bitwise XOR)\nBinary XOR Operator copies the bit if it is set in one operand but not both.\n\n\nExample: (A ^ B) will give 49 which is 0011 0001\n4   ~ (bitwise compliment)\nBinary Ones Complement Operator is unary and has the effect of 'flipping' bits.\n\n\nExample: (~A ) will give -61 which is 1100 0011 in 2's complement form due to a signed binary number.\n5   \n (left shift)\nBinary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand\n\n\nExample: A \n 2 will give 240 which is 1111 0000\n6   \n (right shift)\nBinary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.\n\n\nExample: A \n 2 will give 15 which is 1111\n7   \n (zero fill right shift)\nShift right zero fill operator. The left operands value is moved right by the number of bits specified by the right operand and shifted values are filled up with zeros.\n\n\nExample: A \n2 will give 15 which is 0000 1111\n\n\nThe Logical Operators\n\n\nThe following table lists the logical operators:\n\n\nAssume Boolean variables A holds true and variable B holds false, then:\n\n\n (logical and)\nCalled Logical AND operator. If both the operands are non-zero, then the condition becomes true.\n\n\nExample (A \n B) is false.\n2   || (logical or)\nCalled Logical OR Operator. If any of the two operands are non-zero, then the condition becomes true.\n\n\nExample (A || B) is true.\n3   ! (logical not)\nCalled Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true then Logical NOT operator will make false.\n\n\nExample !(A \n B) is true.\n\n\nThe Assignment Operators\n\n\nThere are following assignment operators supported by Java language:\n\n\nShow Examples\n\n\nSR.NO   Operator and Description\n1   =\nSimple assignment operator, Assigns values from right side operands to left side operand.\n\n\nExample: C = A + B will assign value of A + B into C\n2   +=\nAdd AND assignment operator, It adds right operand to the left operand and assign the result to left operand.\n\n\nExample: C += A is equivalent to C = C + A\n3   -=\nSubtract AND assignment operator, It subtracts right operand from the left operand and assign the result to left operand.\n\n\nExample:C -= A is equivalent to C = C - A\n4   *=\nMultiply AND assignment operator, It multiplies right operand with the left operand and assign the result to left operand.\n\n\nExample: C *= A is equivalent to C = C * A\n5   /=\nDivide AND assignment operator, It divides left operand with the right operand and assign the result to left operand\n\n\nExampleC /= A is equivalent to C = C / A\n6   %=\nModulus AND assignment operator, It takes modulus using two operands and assign the result to left operand.\n\n\nExample: C %= A is equivalent to C = C % A\n7   \n=\nLeft shift AND assignment operator.\n\n\nExampleC \n= 2 is same as C = C \n 2\n8   \n=\nRight shift AND assignment operator\n\n\nExample C \n= 2 is same as C = C \n 2\n9   \n=\nBitwise AND assignment operator.\n\n\nExample: C \n= 2 is same as C = C \n 2\n10  ^=\nbitwise exclusive OR and assignment operator.\n\n\nExample: C ^= 2 is same as C = C ^ 2\n11  |=\nbitwise inclusive OR and assignment operator.\n\n\nExample: C |= 2 is same as C = C | 2\n\n\nMiscellaneous Operators\n\n\nThere are few other operators supported by Java Language.\n\n\nConditional Operator ( ? : )\nConditional operator is also known as the ternary operator. This operator consists of three operands and is used to evaluate Boolean expressions. The goal of the operator is to decide which value should be assigned to the variable. The operator is written as:\n\n\nvariable x = (expression) ? value if true : value if false\n\n\n\n\nFollowing is the example:\n\n\npublic class Test {\n\n   public static void main(String args[]){\n      int a, b;\n      a = 10;\n      b = (a == 1) ? 20: 30;\n      System.out.println( \nValue of b is : \n +  b );\n\n      b = (a == 10) ? 20: 30;\n      System.out.println( \nValue of b is : \n + b );\n   }\n}\n\n\n\n\nThis would produce the following result ?\n\n\nValue of b is : 30\nValue of b is : 20\n\n\n\n\nPrecedence of Operators\n\n\nOperator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator:\n\n\nFor example, x = 7 + 3 * 2; here x is assigned 13, not 20 because operator * has higher precedence than +, so it first gets multiplied with 3*2 and then adds into 7.\n\n\nHere, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first.\n\n\nCategory    Operator    Associativity \nPostfix     () [] . (dot operator)  Left toright \nUnary   ++ - - ! ~  Right to left \nMultiplicative      * / %   Left to right \nAdditive    + -     Left to right \nShift   \n \n \n   Left to right \nRelational      \n \n= \n \n=   Left to right \nEquality    == !=   Left to right \nBitwise AND     \n   Left to right \nBitwise XOR     ^   Left to right \nBitwise OR  |   Left to right \nLogical AND     \n  Left to right \nLogical OR  ||  Left to right \nConditional     ?:  Right to left \nAssignment  = += -= *= /= %= \n= \n= \n= ^= |=   Right to left \n\n\nConditional\n\n\nJava uses boolean variables to evaluate conditions. The boolean values \ntrue\n and \nfalse\n are returned when an expression is compared or evaluated. For example:\n\n\nint a = 4;\nboolean b = a == 4;\n\nif (b) {\n    System.out.println(\nIt's true!\n);\n}\n\n\n\n\nOf course we don't normally assign a conditional expression to a boolean, we just use the short version:\n\n\nint a = 4;\n\nif (a == 4) {\n    System.out.println(\nOhhh! So a is 4!\n);\n}\n\n\n\n\nBoolean operators\n\n\nThere aren't that many operators to use in conditional statements and most of them are pretty strait forward:\n\n\nint a = 4;\nint b = 5;\nboolean result;\nresult = a \n b; // true\nresult = a \n b; // false\nresult = a \n= 4 // a smaller or equal to 4 - true\nresult = b \n= 6 // b bigger or equal to 6 - false\nresult = a == b // a equal to b - false\nresult = a != b // a is not equal to b - true\nresult = a \n b || a \n b // Logical or - true\nresult = 3 \n a \n a \n 6 // Logical and - true\nresult = !result // Logical not - false\n\n\n\n\nif - else and between\n\n\nThe if, else statement in java is pretty simple.\n\n\nif (a == b) {\n    // a and b are equal, let's do something cool\n}\n\n\n\n\nAnd we can also add an else statement after an if, to do something if the condition is not true\n\n\nif (a == b) {\n    // We already know this part\n} else {\n    // a and b are not equal... :/\n}\n\n\n\n\nThe if - else statements doesn't have to be in several lines with {}, if can be used in one line, or without the {}, for a single line statment.\n\n\nif (a == b)\n    System.out.println(\nAnother line Wow!\n);\nelse\n    System.out.println(\nDouble rainbow!\n);\n\n\n\n\nAlthough this method might be useful for making your code shorter by using fewer lines, we strongly recommend for beginners not to use this short version of statements and always use the full version with {}. This goes to every statement that can be shorted to a single line (for, while, etc).\n\n\nThe ugly side of if\n\n\nThere is a another way to write a one line if - else statement by using the operator ? :\n\n\nint a = 4;\nint result = a == 4 ? 1 : 8;\n\n// result will be 1\n// This is equivalent to\nint result;\n\nif (a == 4) {\n    result = 1;\n} else {\n    result = 8;\n}\n\n\n\n\nAgain, we strongly recommend for beginners not to use this version of if.\n\n\n== and equals\n\n\nThe operator == works a bit different on objects than on primitives. When we are using objects and want to check if they are equal, the operator == will say if they are the same, if you want to check if they are logically equal, you should use the equals method on the object. For example:\n\n\nString a = new String(\nWow\n);\nString b = new String(\nWow\n);\nString sameA = a;\n\nboolean r1 = a == b;      // This is false, since a and b are not the same object\nboolean r2 = a.equals(b); // This is true, since a and b are logically equals\nboolean r3 = a == sameA;  // This is true, since a and sameA are really the same object", 
            "title": "Basic Syntax"
        }, 
        {
            "location": "/basic_syntax/#variable-types", 
            "text": "Although Java is object oriented, not all types are objects. It is built on top of basic variable types called primitives.  Here is a list of all primitives in Java:   byte  (number, 1 byte)  short  (number, 2 bytes)  int  (number, 4 bytes)  long  (number, 8 bytes)  float  (float number, 4 bytes)  double  (float number, 8 bytes)  char  (a character, 2 bytes)  boolean  (true or false, 1 byte)\nJava is a strong typed language, which means variables need to be defined before we use them.", 
            "title": "Variable &amp; Types"
        }, 
        {
            "location": "/basic_syntax/#numbers", 
            "text": "To declare and assign a number use the following syntax:  int myNumber;\nmyNumber = 5;  Or you can combine them:  int myNumber = 5;  To define a double floating point number, use the following syntax:  double d = 4.5;\nd = 3.0;  If you want to use float, you will have to cast:  float f = (float) 4.5;  Or, You can use this:  float f = 4.5f (f is a shorter way of casting float)", 
            "title": "Numbers"
        }, 
        {
            "location": "/basic_syntax/#characters-and-strings", 
            "text": "In Java, a character is it's own type and it's not simply a number, so it's not common to put an ascii value in it, there is a special syntax for chars:  char c = 'g';  String is not a primitive. It's a real type, but Java has special treatment for String.  Here are some ways to use a string:  // Create a string with a constructor\nString s1 = new String( Who let the dogs out? );\n// Just using   creates a string, so no need to write it the previous way.\nString s2 =  Who who who who! ;\n// Java defined the operator + on strings to concatenate:\nString s3 = s1 + s2;  There is no operator overloading in Java! The operator + is only defined for strings, you will never see it with other objects, only primitives.  You can also concat string to primitives:  int num = 5;\nString s =  I have   + num +   cookies ; //Be sure not to use   with primitives.", 
            "title": "Characters and Strings"
        }, 
        {
            "location": "/basic_syntax/#boolean", 
            "text": "Every comparison operator in java will return the type  boolean  that not like other languages can only accept two special values:  true  or  false .  boolean b = false;\nb = true;\n\nboolean toBe = false;\nb = toBe || !toBe;\nif (b) {\n    System.out.println(toBe);\n}\n\nint children = 0;\nb = children; // Will not work\nif (children) { // Will not work\n    // Will not work\n}", 
            "title": "boolean"
        }, 
        {
            "location": "/basic_syntax/#operators", 
            "text": "Java provides a rich set of operators to manipulate variables. We can divide all the Java operators into the following groups:   Arithmetic Operators  Relational Operators  Bitwise Operators  Logical Operators  Assignment Operators  Misc Operators", 
            "title": "Operators"
        }, 
        {
            "location": "/basic_syntax/#the-arithmetic-operators", 
            "text": "Arithmetic operators are used in mathematical expressions in the same way that they are used in algebra.  The following table lists the arithmetic operators:  \n   \n   \n     Operator \n     Description \n     Example \n   \n   \n     + (Addition) \n     Adds values on either side of the operator \n     10 + 20 -  30 \n   \n   \n     - (Subtraction) \n     Subtracts right hand operand from left hand operand \n     10 - 20 -  -10 \n   \n   \n     * ( Multiplication ) \n     Multiplies values on either side of the operator \n     10 * 20 -  200 \n   \n   \n     / (Division) \n     Divides left hand operand by right hand operand \n     20 / 10 -  2 \n   \n   \n     % (Modulus) \n     Divides left hand operand by right hand operand and returns remainder \n     7 % 3 - 1 \n   \n   \n     ++ (Increment) \n     Increases the value of operand by 1 \n     \n       a = 20 \n\n       a++ -  21 \n     \n   \n   \n     -- ( Decrement ) \n     Decreases the value of operand by 1 \n     \n       a = 20 \n\n       a-- -  19", 
            "title": "The Arithmetic Operators"
        }, 
        {
            "location": "/basic_syntax/#the-relational-operators", 
            "text": "There are following relational operators supported by Java language  == (equal to)\nChecks if the values of two operands are equal or not, if yes then condition becomes true.  Example: (A == B) is not true.\n2   != (not equal to)\nChecks if the values of two operands are equal or not, if values are not equal then condition becomes true.  Example: (A != B) is true.  3     (greater than)\nChecks if the value of left operand is greater than the value of right operand, if yes then condition becomes true.  Example: (A   B) is not true.\n4     (less than)\nChecks if the value of left operand is less than the value of right operand, if yes then condition becomes true.  Example: (A   B) is true.\n5    = (greater than or equal to)\nChecks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.  Example (A  = B) is not true.\n6    = (less than or equal to)\nChecks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true.  example(A  = B) is true.", 
            "title": "The Relational Operators"
        }, 
        {
            "location": "/basic_syntax/#the-bitwise-operators", 
            "text": "Java defines several bitwise operators, which can be applied to the integer types, long, int, short, char, and byte.  Bitwise operator works on bits and performs bit-by-bit operation. Assume if a = 60; and b = 13; now in binary format they will be as follows:  a = 0011 1100  b = 0000 1101   a b = 0000 1100  a|b = 0011 1101  a^b = 0011 0001  ~a  = 1100 0011  The following table lists the bitwise operators:  Assume integer variable A holds 60 and variable B holds 13 then:   (bitwise and)\nBinary AND Operator copies a bit to the result if it exists in both operands.  Example: (A   B) will give 12 which is 0000 1100\n2   | (bitwise or)\nBinary OR Operator copies a bit if it exists in either operand.  Example: (A | B) will give 61 which is 0011 1101\n3   ^ (bitwise XOR)\nBinary XOR Operator copies the bit if it is set in one operand but not both.  Example: (A ^ B) will give 49 which is 0011 0001\n4   ~ (bitwise compliment)\nBinary Ones Complement Operator is unary and has the effect of 'flipping' bits.  Example: (~A ) will give -61 which is 1100 0011 in 2's complement form due to a signed binary number.\n5     (left shift)\nBinary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand  Example: A   2 will give 240 which is 1111 0000\n6     (right shift)\nBinary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.  Example: A   2 will give 15 which is 1111\n7     (zero fill right shift)\nShift right zero fill operator. The left operands value is moved right by the number of bits specified by the right operand and shifted values are filled up with zeros.  Example: A  2 will give 15 which is 0000 1111", 
            "title": "The Bitwise Operators"
        }, 
        {
            "location": "/basic_syntax/#the-logical-operators", 
            "text": "The following table lists the logical operators:  Assume Boolean variables A holds true and variable B holds false, then:   (logical and)\nCalled Logical AND operator. If both the operands are non-zero, then the condition becomes true.  Example (A   B) is false.\n2   || (logical or)\nCalled Logical OR Operator. If any of the two operands are non-zero, then the condition becomes true.  Example (A || B) is true.\n3   ! (logical not)\nCalled Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true then Logical NOT operator will make false.  Example !(A   B) is true.", 
            "title": "The Logical Operators"
        }, 
        {
            "location": "/basic_syntax/#the-assignment-operators", 
            "text": "There are following assignment operators supported by Java language:  Show Examples  SR.NO   Operator and Description\n1   =\nSimple assignment operator, Assigns values from right side operands to left side operand.  Example: C = A + B will assign value of A + B into C\n2   +=\nAdd AND assignment operator, It adds right operand to the left operand and assign the result to left operand.  Example: C += A is equivalent to C = C + A\n3   -=\nSubtract AND assignment operator, It subtracts right operand from the left operand and assign the result to left operand.  Example:C -= A is equivalent to C = C - A\n4   *=\nMultiply AND assignment operator, It multiplies right operand with the left operand and assign the result to left operand.  Example: C *= A is equivalent to C = C * A\n5   /=\nDivide AND assignment operator, It divides left operand with the right operand and assign the result to left operand  ExampleC /= A is equivalent to C = C / A\n6   %=\nModulus AND assignment operator, It takes modulus using two operands and assign the result to left operand.  Example: C %= A is equivalent to C = C % A\n7    =\nLeft shift AND assignment operator.  ExampleC  = 2 is same as C = C   2\n8    =\nRight shift AND assignment operator  Example C  = 2 is same as C = C   2\n9    =\nBitwise AND assignment operator.  Example: C  = 2 is same as C = C   2\n10  ^=\nbitwise exclusive OR and assignment operator.  Example: C ^= 2 is same as C = C ^ 2\n11  |=\nbitwise inclusive OR and assignment operator.  Example: C |= 2 is same as C = C | 2", 
            "title": "The Assignment Operators"
        }, 
        {
            "location": "/basic_syntax/#miscellaneous-operators", 
            "text": "There are few other operators supported by Java Language.  Conditional Operator ( ? : )\nConditional operator is also known as the ternary operator. This operator consists of three operands and is used to evaluate Boolean expressions. The goal of the operator is to decide which value should be assigned to the variable. The operator is written as:  variable x = (expression) ? value if true : value if false  Following is the example:  public class Test {\n\n   public static void main(String args[]){\n      int a, b;\n      a = 10;\n      b = (a == 1) ? 20: 30;\n      System.out.println(  Value of b is :   +  b );\n\n      b = (a == 10) ? 20: 30;\n      System.out.println(  Value of b is :   + b );\n   }\n}  This would produce the following result ?  Value of b is : 30\nValue of b is : 20", 
            "title": "Miscellaneous Operators"
        }, 
        {
            "location": "/basic_syntax/#precedence-of-operators", 
            "text": "Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator:  For example, x = 7 + 3 * 2; here x is assigned 13, not 20 because operator * has higher precedence than +, so it first gets multiplied with 3*2 and then adds into 7.  Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first.  Category    Operator    Associativity \nPostfix     () [] . (dot operator)  Left toright \nUnary   ++ - - ! ~  Right to left \nMultiplicative      * / %   Left to right \nAdditive    + -     Left to right \nShift           Left to right \nRelational         =    =   Left to right \nEquality    == !=   Left to right \nBitwise AND         Left to right \nBitwise XOR     ^   Left to right \nBitwise OR  |   Left to right \nLogical AND        Left to right \nLogical OR  ||  Left to right \nConditional     ?:  Right to left \nAssignment  = += -= *= /= %=  =  =  = ^= |=   Right to left", 
            "title": "Precedence of Operators"
        }, 
        {
            "location": "/basic_syntax/#conditional", 
            "text": "Java uses boolean variables to evaluate conditions. The boolean values  true  and  false  are returned when an expression is compared or evaluated. For example:  int a = 4;\nboolean b = a == 4;\n\nif (b) {\n    System.out.println( It's true! );\n}  Of course we don't normally assign a conditional expression to a boolean, we just use the short version:  int a = 4;\n\nif (a == 4) {\n    System.out.println( Ohhh! So a is 4! );\n}", 
            "title": "Conditional"
        }, 
        {
            "location": "/basic_syntax/#boolean-operators", 
            "text": "There aren't that many operators to use in conditional statements and most of them are pretty strait forward:  int a = 4;\nint b = 5;\nboolean result;\nresult = a   b; // true\nresult = a   b; // false\nresult = a  = 4 // a smaller or equal to 4 - true\nresult = b  = 6 // b bigger or equal to 6 - false\nresult = a == b // a equal to b - false\nresult = a != b // a is not equal to b - true\nresult = a   b || a   b // Logical or - true\nresult = 3   a   a   6 // Logical and - true\nresult = !result // Logical not - false", 
            "title": "Boolean operators"
        }, 
        {
            "location": "/basic_syntax/#if-else-and-between", 
            "text": "The if, else statement in java is pretty simple.  if (a == b) {\n    // a and b are equal, let's do something cool\n}  And we can also add an else statement after an if, to do something if the condition is not true  if (a == b) {\n    // We already know this part\n} else {\n    // a and b are not equal... :/\n}  The if - else statements doesn't have to be in several lines with {}, if can be used in one line, or without the {}, for a single line statment.  if (a == b)\n    System.out.println( Another line Wow! );\nelse\n    System.out.println( Double rainbow! );  Although this method might be useful for making your code shorter by using fewer lines, we strongly recommend for beginners not to use this short version of statements and always use the full version with {}. This goes to every statement that can be shorted to a single line (for, while, etc).", 
            "title": "if - else and between"
        }, 
        {
            "location": "/basic_syntax/#the-ugly-side-of-if", 
            "text": "There is a another way to write a one line if - else statement by using the operator ? :  int a = 4;\nint result = a == 4 ? 1 : 8;\n\n// result will be 1\n// This is equivalent to\nint result;\n\nif (a == 4) {\n    result = 1;\n} else {\n    result = 8;\n}  Again, we strongly recommend for beginners not to use this version of if.", 
            "title": "The ugly side of if"
        }, 
        {
            "location": "/basic_syntax/#and-equals", 
            "text": "The operator == works a bit different on objects than on primitives. When we are using objects and want to check if they are equal, the operator == will say if they are the same, if you want to check if they are logically equal, you should use the equals method on the object. For example:  String a = new String( Wow );\nString b = new String( Wow );\nString sameA = a;\n\nboolean r1 = a == b;      // This is false, since a and b are not the same object\nboolean r2 = a.equals(b); // This is true, since a and b are logically equals\nboolean r3 = a == sameA;  // This is true, since a and sameA are really the same object", 
            "title": "== and equals"
        }, 
        {
            "location": "/data_structure/", 
            "text": "Data Structure\n\n\ndatetime\n\n\nCalendar c = Calendar.getInstance();\n\n\n\n\nstring, number\n\n\nConvert \n1\n\n\nString.valueOf(1000)\n\n\n\n\nMake a random\n\n\n// create a random number from 0 to 99\n(new Random()).nextInt(100)\n\n\n\n\nCollection\n\n\nArrays\n\n\nArrays in Java are also objects. They need to be declared and then created. In order to declare a variable that will hold an array of integers, we use the following syntax:\n\n\nint[] arr;\n\n\n\n\nNotice there is no size, since we didn't create the array yet.\n\n\narr = new int[10];\n\n\n\n\nThis will create a new array with the size of 10. We can check the size by printing the array's length:\n\n\nSystem.out.println(arr.length);\n\n\n\n\nWe can access the array and set values:\n\n\narr[0] = 4;\narr[1] = arr[0] + 5;\n\n\n\n\nJava arrays are 0 based, which means the first element in an array is accessed at index 0 (e.g: arr[0], which accesses the first element). Also, as an example, an array of size 5 will only go up to index 4 due to it being 0 based.\n\n\nint[] arr = new int[5]\n//accesses and sets the first element\narr[0] = 4;\n\n\n\n\nWe can also create an array with values in the same line:\n\n\nint[] arr = {1, 2, 3, 4, 5};\n\n\n\n\nDon't try to print the array without a loop, it will print something nasty like [I@f7e6a96.\n\n\nSet\n\n\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class HelloWorld{\n\n     public static void main(String []args){\n         Set\nDog\n dogs = new  HashSet\nDog\n();\n         Dog dog1 = new Dog(\na\n, 1);\n         Dog dog2 = new Dog(\na\n, 2);\n         Dog dog3 = new Dog(\na\n, 1);\n         Dog dog4 = new Dog(\nb\n, 1);\n         dogs.add( dog1);\n         dogs.add( dog2);\n         dogs.add( dog3);\n         dogs.add( dog4);\n        System.out.println(dogs.size());\n     }\n}\n\n// 3\n\n\n\n\npublic class Dog {\n    public String name;\n    public int age;\n    public int value;\n    public Dog(String name, int age){\n        this.name = name;\n        this.age = age;\n        value = (this.name + String.valueOf(this.age)).hashCode();\n    }\n\n    @Override\n    public int hashCode() {\n        return value;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        return (obj instanceof Dog \n ((Dog) obj).value == this.value);\n    }\n}\n\n\n\n\nList \n1\n\n\nList\nString\n places = Arrays.asList(\nBuenos Aires\n, \nC\u00f3rdoba\n, \nLa Plata\n);\n\n\n\n\n\n\n\n\n\n\n\n\nInitialization of an ArrayList in one line", 
            "title": "Data Structure"
        }, 
        {
            "location": "/data_structure/#data-structure", 
            "text": "", 
            "title": "Data Structure"
        }, 
        {
            "location": "/data_structure/#datetime", 
            "text": "Calendar c = Calendar.getInstance();", 
            "title": "datetime"
        }, 
        {
            "location": "/data_structure/#string-number", 
            "text": "Convert  1  String.valueOf(1000)  Make a random  // create a random number from 0 to 99\n(new Random()).nextInt(100)", 
            "title": "string, number"
        }, 
        {
            "location": "/data_structure/#collection", 
            "text": "", 
            "title": "Collection"
        }, 
        {
            "location": "/data_structure/#arrays", 
            "text": "Arrays in Java are also objects. They need to be declared and then created. In order to declare a variable that will hold an array of integers, we use the following syntax:  int[] arr;  Notice there is no size, since we didn't create the array yet.  arr = new int[10];  This will create a new array with the size of 10. We can check the size by printing the array's length:  System.out.println(arr.length);  We can access the array and set values:  arr[0] = 4;\narr[1] = arr[0] + 5;  Java arrays are 0 based, which means the first element in an array is accessed at index 0 (e.g: arr[0], which accesses the first element). Also, as an example, an array of size 5 will only go up to index 4 due to it being 0 based.  int[] arr = new int[5]\n//accesses and sets the first element\narr[0] = 4;  We can also create an array with values in the same line:  int[] arr = {1, 2, 3, 4, 5};  Don't try to print the array without a loop, it will print something nasty like [I@f7e6a96.", 
            "title": "Arrays"
        }, 
        {
            "location": "/data_structure/#set", 
            "text": "import java.util.HashSet;\nimport java.util.Set;\n\npublic class HelloWorld{\n\n     public static void main(String []args){\n         Set Dog  dogs = new  HashSet Dog ();\n         Dog dog1 = new Dog( a , 1);\n         Dog dog2 = new Dog( a , 2);\n         Dog dog3 = new Dog( a , 1);\n         Dog dog4 = new Dog( b , 1);\n         dogs.add( dog1);\n         dogs.add( dog2);\n         dogs.add( dog3);\n         dogs.add( dog4);\n        System.out.println(dogs.size());\n     }\n}\n\n// 3  public class Dog {\n    public String name;\n    public int age;\n    public int value;\n    public Dog(String name, int age){\n        this.name = name;\n        this.age = age;\n        value = (this.name + String.valueOf(this.age)).hashCode();\n    }\n\n    @Override\n    public int hashCode() {\n        return value;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        return (obj instanceof Dog   ((Dog) obj).value == this.value);\n    }\n}", 
            "title": "Set"
        }, 
        {
            "location": "/data_structure/#list-1", 
            "text": "List String  places = Arrays.asList( Buenos Aires ,  C\u00f3rdoba ,  La Plata );      Initialization of an ArrayList in one line", 
            "title": "List 1"
        }, 
        {
            "location": "/ide/", 
            "text": "Java: IDE\n\n\nIntellIJ\n\n\n\u251c\u2500\u2500 1. Project Manager\n\u251c\u2500\u2500 2. Search \n Replace\n\u251c\u2500\u2500 3. Navigation\n\u251c\u2500\u2500 4. Formatting\n\u251c\u2500\u2500 5. Debugging\n\u251c\u2500\u2500 6. Build \n Release\n\u2514\u2500\u2500 7. Git Integration\n\n\n\n\n1. Project Manager\n\n\n1.1 Create New Project\n\n\n1.2 Import Maven Project\n\n\nhttps://www.jetbrains.com/help/idea/2016.1/importing-project-from-maven-model.html\n\n\n2. Search \n Replace\n\n\n\n\n\n\nGlobal Search\n\n\nShift Shift\n\n\n\n\n\n\n\n3. Navigation\n\n\n\n\n\n\nNext/Previous Error\n\n\nF2\n / \nShift + F2\n\n\n\n\n\n\n\n4. Formatting\n\n\n\n\n\n\nAuto Format\n\n\nCtrl + Alt + L", 
            "title": "IDE"
        }, 
        {
            "location": "/ide/#java-ide", 
            "text": "", 
            "title": "Java: IDE"
        }, 
        {
            "location": "/ide/#intellij", 
            "text": "\u251c\u2500\u2500 1. Project Manager\n\u251c\u2500\u2500 2. Search   Replace\n\u251c\u2500\u2500 3. Navigation\n\u251c\u2500\u2500 4. Formatting\n\u251c\u2500\u2500 5. Debugging\n\u251c\u2500\u2500 6. Build   Release\n\u2514\u2500\u2500 7. Git Integration", 
            "title": "IntellIJ"
        }, 
        {
            "location": "/ide/#1-project-manager", 
            "text": "1.1 Create New Project  1.2 Import Maven Project  https://www.jetbrains.com/help/idea/2016.1/importing-project-from-maven-model.html", 
            "title": "1. Project Manager"
        }, 
        {
            "location": "/ide/#2-search-replace", 
            "text": "Global Search  Shift Shift", 
            "title": "2. Search &amp; Replace"
        }, 
        {
            "location": "/ide/#3-navigation", 
            "text": "Next/Previous Error  F2  /  Shift + F2", 
            "title": "3. Navigation"
        }, 
        {
            "location": "/ide/#4-formatting", 
            "text": "Auto Format  Ctrl + Alt + L", 
            "title": "4. Formatting"
        }, 
        {
            "location": "/package_manager/", 
            "text": "Java: Package Manager\n\n\nGradle\n\n\n\n\nCreate your first project with gradle\n\n\nStep 1: Create new project folder\n\n\nmkdir gradle_sample\n\n\n\n\nStep 2: Make folder structure\n\n\ngradle init --type java-library\n\n\n\n\nStep 3: Import to IntelliJ\n\n\nOpen IntelliJ, click File \n New... \n Project From Existing Sources... \n\n\n\n\nPlugins\n\n\nApplication plugin\n\n\nUsages\n\n\n1.\n Using the application plugin\n\n\nAdd this line in \nbuild.gradle\n\n\napply plugin: 'application'\n\n\n\n\n2.\n  Configure the application main class\n\n\nmainClassName = \norg.gradle.sample.Main", 
            "title": "Package Manager"
        }, 
        {
            "location": "/package_manager/#java-package-manager", 
            "text": "", 
            "title": "Java: Package Manager"
        }, 
        {
            "location": "/package_manager/#gradle", 
            "text": "", 
            "title": "Gradle"
        }, 
        {
            "location": "/package_manager/#create-your-first-project-with-gradle", 
            "text": "Step 1: Create new project folder  mkdir gradle_sample  Step 2: Make folder structure  gradle init --type java-library  Step 3: Import to IntelliJ  Open IntelliJ, click File   New...   Project From Existing Sources...", 
            "title": "Create your first project with gradle"
        }, 
        {
            "location": "/package_manager/#plugins", 
            "text": "", 
            "title": "Plugins"
        }, 
        {
            "location": "/package_manager/#application-plugin", 
            "text": "Usages  1.  Using the application plugin  Add this line in  build.gradle  apply plugin: 'application'  2.   Configure the application main class  mainClassName =  org.gradle.sample.Main", 
            "title": "Application plugin"
        }, 
        {
            "location": "/build_tool/", 
            "text": "Java: Build Tool\n\n\nApache Ant\n\n\n\n\nApache Ant is a Java library and command-line tool whose mission is to drive processes described in build files as targets and extension points dependent upon each other. The main known usage of Ant is the build of Java applications. Ant supplies a number of built-in tasks allowing to compile, assemble, test and run Java applications. Ant can also be used effectively to build non Java applications, for instance C or C++ applications. More generally, Ant can be used to pilot any type of process which can be described in terms of targets and tasks. \n1\n\n\nInstall Ant\n\n\nDownload and extract Apache Ant 1.9.6\n\n\nwget http://mirrors.viethosting.vn/apache//ant/binaries/apache-ant-1.9.6-bin.tar.gz\ntar -xzf apache-ant-1.9.6-bin.tar.gz\n\n\n\n\nSet path to ant folder\n\n\nBuild Ant through proxy\n\n\n\nRequirement: 1.9.5+\n\n\nAdd the following lines into \nbuild.xml\n\n\ntarget name=\nivy-init\n depends=\nivy-proxy, ivy-probe-antlib, ivy-init-antlib\n description=\n--\n initialise Ivy settings\n\n  \nivy:settings file=\n${ivy.dir}/ivysettings.xml\n /\n\n  \n/target\n\n \ntarget name=\nivy-proxy\n description=\n--\nProxy Ivy settings\n\n  \nproperty name=\nproxy.host\n value=\nproxy.com\n /\n\n  \nproperty name=\nproxy.port\n value=\n8080\n /\n\n  \nproperty name=\nproxy.user\n value=\nuser\n /\n\n  \nproperty name=\nproxy.password\n value=\npassword\n /\n\n  \nsetproxy\n    proxyhost=\n${proxy.host}\n\n    proxyport=\n${proxy.port}\n\n    proxyuser=\n${proxy.user}\n\n    proxypassword=\n${proxy.password}\n /\n\n \n/target\n\n\n\n\n\n\n\n\n\n\n\n\n\nApache Ant\u2122", 
            "title": "Build Tool"
        }, 
        {
            "location": "/build_tool/#java-build-tool", 
            "text": "", 
            "title": "Java: Build Tool"
        }, 
        {
            "location": "/build_tool/#apache-ant", 
            "text": "Apache Ant is a Java library and command-line tool whose mission is to drive processes described in build files as targets and extension points dependent upon each other. The main known usage of Ant is the build of Java applications. Ant supplies a number of built-in tasks allowing to compile, assemble, test and run Java applications. Ant can also be used effectively to build non Java applications, for instance C or C++ applications. More generally, Ant can be used to pilot any type of process which can be described in terms of targets and tasks.  1", 
            "title": "Apache Ant"
        }, 
        {
            "location": "/build_tool/#install-ant", 
            "text": "Download and extract Apache Ant 1.9.6  wget http://mirrors.viethosting.vn/apache//ant/binaries/apache-ant-1.9.6-bin.tar.gz\ntar -xzf apache-ant-1.9.6-bin.tar.gz  Set path to ant folder", 
            "title": "Install Ant"
        }, 
        {
            "location": "/production/", 
            "text": "Java: Production (Docker)\n\n\nProduction with \njava\n\n\nBase Image: [java]\n/java\n\n\nDocker Folder\n\n\nyour-app/\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bin\n\u2502   \u251c\u2500\u2500\u2500\u2500\u2500 your_app.sh\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 lib\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 run.sh\n\n\n\n\nDockerfile\n\n\nFROM java:7\n\nCOPY run.sh run.sh\n\n\n\n\nrun.sh\n\n\ncd /app/bin\nchmod u+x your_app.sh\n./your_app.sh\n\n\n\n\nCompose\n\n\n service:\n  build: ./your_app\n  command: 'bash run.sh'", 
            "title": "Production"
        }, 
        {
            "location": "/production/#java-production-docker", 
            "text": "Production with  java  Base Image: [java] /java  Docker Folder  your-app/\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bin\n\u2502   \u251c\u2500\u2500\u2500\u2500\u2500 your_app.sh\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 lib\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 run.sh  Dockerfile  FROM java:7\n\nCOPY run.sh run.sh  run.sh  cd /app/bin\nchmod u+x your_app.sh\n./your_app.sh  Compose   service:\n  build: ./your_app\n  command: 'bash run.sh'", 
            "title": "Java: Production (Docker)"
        }
    ]
}